{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omer9\\\\Desktop\\\\itc\\\\Hakaton\\\\JoinIn\\\\frontend\\\\src\\\\Components\\\\CreateEvent\\\\GooglePlaces.jsx\",\n    _s = $RefreshSig$();\n\nimport PlacesAutocomplete from \"react-places-autocomplete\";\nimport { geocodeByAddress, geocodeByPlaceId, getLatLng } from \"react-places-autocomplete\";\nimport { useState } from \"react\";\nimport scriptLoader from \"react-async-script-loader\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GooglePlace({\n  isScriptLoaded,\n  isScriptLoadSucceed\n}) {\n  _s();\n\n  const [address, setAddress] = useState(\"\");\n\n  const handleChange = value => {\n    setAddress(value);\n  };\n\n  const handleSelect = address => {\n    setAddress(address);\n    geocodeByAddress(address).then(results => getLatLng(results[0])).then(latLng => {\n      console.log(\"Success\", latLng);\n    }).catch(error => console.error(\"Error\", error));\n  };\n\n  if (isScriptLoaded && isScriptLoadSucceed) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"google\",\n      children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n        value: address,\n        onChange: handleChange,\n        onSelect: handleSelect,\n        children: ({\n          getInputProps,\n          suggestions,\n          getSuggestionItemProps,\n          loading\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            id: \"outlined-basic\",\n            label: \"Location\",\n            variant: \"outlined\",\n            ...getInputProps({\n              placeholder: \"Enter Address ...\"\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 29\n            }, this), suggestions.map(suggestion => {\n              const style = suggestion.active ? {\n                backgroundColor: \"orange\",\n                cursor: \"pointer\"\n              } : {\n                backgroundColor: \"white\",\n                cursor: \"pointer\"\n              };\n              return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                  style\n                }),\n                children: suggestion.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 21\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hello from google Places \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 12\n    }, this);\n  }\n}\n\n_s(GooglePlace, \"Nj6wSJwO05S0A7/J3wD3ytLWGxI=\");\n\n_c = GooglePlace;\nexport default scriptLoader([\"https://maps.googleapis.com/maps/api/js?key=AIzaSyA_kRsd4QNiBkJ2P35TGRuL2sXYOeNyEmg&libraries=places\"])(GooglePlace);\n\nvar _c;\n\n$RefreshReg$(_c, \"GooglePlace\");","map":{"version":3,"sources":["C:/Users/omer9/Desktop/itc/Hakaton/JoinIn/frontend/src/Components/CreateEvent/GooglePlaces.jsx"],"names":["PlacesAutocomplete","geocodeByAddress","geocodeByPlaceId","getLatLng","useState","scriptLoader","TextField","GooglePlace","isScriptLoaded","isScriptLoadSucceed","address","setAddress","handleChange","value","handleSelect","then","results","latLng","console","log","catch","error","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","map","suggestion","style","active","backgroundColor","cursor","description"],"mappings":";;;AAAA,OAAOA,kBAAP,MAA+B,2BAA/B;AACA,SACEC,gBADF,EAEEC,gBAFF,EAGEC,SAHF,QAIO,2BAJP;AAKA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;;;AAEA,SAASC,WAAT,CAAqB;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA;AAAlB,CAArB,EAA8D;AAAA;;AAC5D,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;;AAEA,QAAMQ,YAAY,GAAIC,KAAD,IAAW;AAC9BF,IAAAA,UAAU,CAACE,KAAD,CAAV;AACD,GAFD;;AAIA,QAAMC,YAAY,GAAIJ,OAAD,IAAa;AAChCC,IAAAA,UAAU,CAACD,OAAD,CAAV;AACAT,IAAAA,gBAAgB,CAACS,OAAD,CAAhB,CACGK,IADH,CACSC,OAAD,IAAab,SAAS,CAACa,OAAO,CAAC,CAAD,CAAR,CAD9B,EAEGD,IAFH,CAESE,MAAD,IAAY;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;AACD,KAJH,EAKGG,KALH,CAKUC,KAAD,IAAWH,OAAO,CAACG,KAAR,CAAc,OAAd,EAAuBA,KAAvB,CALpB;AAMD,GARD;;AAUA,MAAIb,cAAc,IAAIC,mBAAtB,EAA2C;AACzC,wBACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACE,QAAC,kBAAD;AACE,QAAA,KAAK,EAAEC,OADT;AAEE,QAAA,QAAQ,EAAEE,YAFZ;AAGE,QAAA,QAAQ,EAAEE,YAHZ;AAAA,kBAKG,CAAC;AACAQ,UAAAA,aADA;AAEAC,UAAAA,WAFA;AAGAC,UAAAA,sBAHA;AAIAC,UAAAA;AAJA,SAAD,kBAMC;AAAA,kCACE,QAAC,SAAD;AACE,YAAA,EAAE,EAAC,gBADL;AAEE,YAAA,KAAK,EAAC,UAFR;AAGE,YAAA,OAAO,EAAC,UAHV;AAAA,eAIMH,aAAa,CAAC;AAChBI,cAAAA,WAAW,EAAE;AADG,aAAD;AAJnB;AAAA;AAAA;AAAA;AAAA,kBADF,eASE;AAAA,uBACGD,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADd,EAEGF,WAAW,CAACI,GAAZ,CAAiBC,UAAD,IAAgB;AAC/B,oBAAMC,KAAK,GAAGD,UAAU,CAACE,MAAX,GACV;AAAEC,gBAAAA,eAAe,EAAE,QAAnB;AAA6BC,gBAAAA,MAAM,EAAE;AAArC,eADU,GAEV;AAAED,gBAAAA,eAAe,EAAE,OAAnB;AAA4BC,gBAAAA,MAAM,EAAE;AAApC,eAFJ;AAIA,kCACE,oBAASR,sBAAsB,CAACI,UAAD,EAAa;AAAEC,kBAAAA;AAAF,iBAAb,CAA/B;AAAA,0BACGD,UAAU,CAACK;AADd;AAAA;AAAA;AAAA;AAAA,sBADF;AAKD,aAVA,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,kBATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAXJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAyCD,GA1CD,MA0CO;AACL,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;AACF;;GA9DQ1B,W;;KAAAA,W;AA+DT,eAAeF,YAAY,CAAC,CAC1B,sGAD0B,CAAD,CAAZ,CAEZE,WAFY,CAAf","sourcesContent":["import PlacesAutocomplete from \"react-places-autocomplete\";\r\nimport {\r\n  geocodeByAddress,\r\n  geocodeByPlaceId,\r\n  getLatLng,\r\n} from \"react-places-autocomplete\";\r\nimport { useState } from \"react\";\r\nimport scriptLoader from \"react-async-script-loader\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nfunction GooglePlace({ isScriptLoaded, isScriptLoadSucceed }) {\r\n  const [address, setAddress] = useState(\"\");\r\n\r\n  const handleChange = (value) => {\r\n    setAddress(value);\r\n  };\r\n\r\n  const handleSelect = (address) => {\r\n    setAddress(address);\r\n    geocodeByAddress(address)\r\n      .then((results) => getLatLng(results[0]))\r\n      .then((latLng) => {\r\n        console.log(\"Success\", latLng);\r\n      })\r\n      .catch((error) => console.error(\"Error\", error));\r\n  };\r\n\r\n  if (isScriptLoaded && isScriptLoadSucceed) {\r\n    return (\r\n      <div className=\"google\">\r\n        <PlacesAutocomplete\r\n          value={address}\r\n          onChange={handleChange}\r\n          onSelect={handleSelect}\r\n        >\r\n          {({\r\n            getInputProps,\r\n            suggestions,\r\n            getSuggestionItemProps,\r\n            loading,\r\n          }) => (\r\n            <div>\r\n              <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"Location\"\r\n                variant=\"outlined\"\r\n                {...getInputProps({\r\n                  placeholder: \"Enter Address ...\",\r\n                })}\r\n              />\r\n              <div>\r\n                {loading && <div>Loading...</div>}\r\n                {suggestions.map((suggestion) => {\r\n                  const style = suggestion.active\r\n                    ? { backgroundColor: \"orange\", cursor: \"pointer\" }\r\n                    : { backgroundColor: \"white\", cursor: \"pointer\" };\r\n\r\n                  return (\r\n                    <div {...getSuggestionItemProps(suggestion, { style })}>\r\n                      {suggestion.description}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </PlacesAutocomplete>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <h1>Hello from google Places </h1>;\r\n  }\r\n}\r\nexport default scriptLoader([\r\n  \"https://maps.googleapis.com/maps/api/js?key=AIzaSyA_kRsd4QNiBkJ2P35TGRuL2sXYOeNyEmg&libraries=places\",\r\n])(GooglePlace);\r\n"]},"metadata":{},"sourceType":"module"}